import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class Fenetre {

    private JTextField nomChamp;
    private JTextField ageChamp;
    private JTextField adresseChamp;

    public Fenetre() {

        JFrame frame = new JFrame("Formulaire de Validation");


        frame.setSize(500, 500);

        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

        JLabel nomLabel = new JLabel("Nom");
        nomChamp = new JTextField();
        panel.add(nomLabel);
        panel.add(nomChamp);

        JLabel ageLabel = new JLabel("Age");
        ageChamp = new JTextField();
        panel.add(ageLabel);
        panel.add(ageChamp);

        JLabel adresseLabel = new JLabel("Adresse");
        adresseChamp = new JTextField();
        panel.add(adresseLabel);
        panel.add(adresseChamp);

try {

        Class.forName("org.hsqldb.jdbc.JDBCDriver");
        System.out.println("Driver chargé avec succès!");

} catch (ClassNotFoundException e) {
	System.out.println("Driver pas trouvé");
}





        JButton validationButton = new JButton("Validation");
        validationButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

try {

        Connection connection = DriverManager.getConnection("jdbc:hsqldb:file:CLIENTS_BDD","BENOIT","");
        System.out.println("Connexion à la base de données réussie!");

	
        try {
	Statement statement = connection.createStatement();  
                           String createTableSQL = "CREATE TABLE IF NOT EXISTS personnes ("
                        + "id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
                        + "nom VARCHAR(30) NOT NULL, "
                        + "age INTEGER DEFAULT 0 NOT NULL, "
                        + "adresse VARCHAR(50))"; // Chaîne fermée ici correctement
                statement.execute(createTableSQL);
            System.out.println("Table créée");
        }catch (SQLException f) {
	System.out.println("table pas réussi à créer ");
	}



try {
String insertSQL = "INSERT INTO personnes (nom, age, adresse) VALUES ('" 
    + nomChamp.getText() + "', " 
    + ageChamp.getText() + ", '" 
    + adresseChamp.getText() + "')";
Statement statement = connection.createStatement(); 
statement.executeUpdate(insertSQL);
    System.out.println(" lignes insérées.");
} catch (SQLException g) {
    System.out.println("Erreur lors de l'insertion des données : " + g.getMessage());
}



	String selectSQL = "SELECT * FROM personnes";
	try {
System.out.println("on essaie de chercher des données");
	Statement statement = connection.createStatement();
 	   ResultSet resultSet = statement.executeQuery(selectSQL);
  	  while (resultSet.next()) {
   	     int id = resultSet.getInt("id");
    	    String nom = resultSet.getString("nom");
    	    int age = resultSet.getInt("age");
    	    String adresse = resultSet.getString("adresse");
	
        System.out.println("ID: " + id + ", Nom: " + nom + ", Age: " + age + ", Adresse: " + adresse);
    }
} catch (SQLException h) {
    System.out.println("Erreur lors de la sélection des données : " + h.getMessage());
}




} catch (SQLException j) {
	System.out.println("Base pas bon");
}
            }
        });

        panel.add(validationButton);
        frame.add(panel);
        frame.setVisible(true);
    }

   
}
